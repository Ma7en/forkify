
// =======================================
// =======================================
// =======================================
// =======================================
// =======================================
/* 278 Loading a Recipe from API

npm i parcel

npm i core-js regenerator-runtime 


بعد كدا
npm start

بعد كدا
npm install

// =======================================
// =======================================
// https://forkify-api.herokuapp.com/v2

const showRecipe = async function () {
		try {
				const response = await fetch(
						`https://forkify-api.herokuapp.com/v2/recopes/5ed6604591c37cdc054bc886`
				);
				const data = await response.json();
				if (!response.ok)
						throw new Error(`${data.message} (${response.status})`);

				// console.log(res, data);
				let { recipe } = data.data;

				recipe = {
						id: recipe.id,
						title: recipe.title,
						publisher: recipe.publisher,
						sourceUrl: recipe.source_url,
						image: recipe.image_url,
						servings: recipe.servings,
						cookingTime: recipe.cooking_time,
						ingredients: recipe.ingredients,
				};
				
				console.log(recipe);
		} catch (error) {
				console.log(error);
		}
};

*/

// =======================================
/* 279 Rendering the Recipe


// import icons1 from "../img/icons.svg"; // parcel 1
import icons from "url:../img/icons.svg"; // parcel 2
console.log(icons);
import "core-js/stable";
import "regenerator-runtime/runtime";



const recipeContainer = document.querySelector(".recipe");

const timeout = function (s) {
		return new Promise(function (_, reject) {
				setTimeout(function () {
						reject(
								new Error(`Request took too long! Timeout after ${s} second`)
						);
				}, s * 1000);
		});
};

// https://forkify-api.herokuapp.com/v2

///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////

const renderSpinner = function (parenEl) {
		const markup = `
				<div class="spinner">
						<svg>
						<use href="${icons}#icon-loader"></use>
						</svg>
				</div>
		`;
		parenEl.innerHTML = "";
		parenEl.insertAdjacentHTML("afterbegin", markup);
};

const showRecipe = async function () {
		try {
				// 1) loding rrecipe
				renderSpinner(recipeContainer);

				const response = await fetch(
						`https://forkify-api.herokuapp.com/v2/recopes/5ed6604591c37cdc054bc886`
				);
				const data = await response.json();
				if (!response.ok)
						throw new Error(`${data.message} (${response.status})`);

				// console.log(res, data);
				let { recipe } = data.data;

				recipe = {
						id: recipe.id,
						title: recipe.title,
						publisher: recipe.publisher,
						sourceUrl: recipe.source_url,
						image: recipe.image_url,
						servings: recipe.servings,
						cookingTime: recipe.cooking_time,
						ingredients: recipe.ingredients,
				};

				console.log(recipe);

				// 2) rendering recipe
				const markup = `

				<figure class="recipe__fig">
					<img src="${recipe.image}" alt="${
						recipe.title
				}" class="recipe__img" />
					<h1 class="recipe__title">
						<span>${recipe.title}</span>
					</h1>
				</figure>

				<div class="recipe__details">
					<div class="recipe__info">
						<svg class="recipe__info-icon">
							<use href="${icons}#icon-clock"></use>
						</svg>
						<span class="recipe__info-data recipe__info-data--minutes">${
								recipe.cookingTime
						}</span>
						<span class="recipe__info-text">minutes</span>
					</div>

					<div class="recipe__info">
						<svg class="recipe__info-icon">
							<use href="${icons}#icon-users"></use>
						</svg>
						<span class="recipe__info-data recipe__info-data--people">${
								recipe.servings
						}</span>
						<span class="recipe__info-text">servings</span>

						<div class="recipe__info-buttons">
							<button class="btn--tiny btn--increase-servings">
								<svg>
									<use href="${icons}#icon-minus-circle"></use>
								</svg>
							</button>
							<button class="btn--tiny btn--increase-servings">
								<svg>
									<use href="${icons}#icon-plus-circle"></use>
								</svg>
							</button>
						</div>
					</div>

					<div class="recipe__user-generated">
						<svg>
							<use href="${icons}#icon-user"></use>
						</svg>
					</div>
					<button class="btn--round">
						<svg class="">
							<use href="${icons}#icon-bookmark-fill"></use>
						</svg>
					</button>
				</div>

				<div class="recipe__ingredients">
					<h2 class="heading--2">Recipe ingredients</h2>
					<ul class="recipe__ingredient-list">

					${recipe.ingredients
							.map((ing) => {
									return `
								<li class="recipe__ingredient">
										<svg class="recipe__icon">
												<use href="${icons}#icon-check"></use>
										</svg>

										<div class="recipe__quantity">${ing.quantity}</div>

										<div class="recipe__description">
												<span class="recipe__unit">${ing.unit}</span>
										${ing.description}
										</div>
								</li>
								
								`;
							})
							.json("")}
					</ul>
				</div>

				<div class="recipe__directions">
					<h2 class="heading--2">How to cook it</h2>
					<p class="recipe__directions-text">
						This recipe was carefully designed and tested by
						<span class="recipe__publisher">${
								recipe.publisher
						}</span>. Please check out
						directions at their website.
					</p>
					<a
						class="btn--small recipe__btn"
						href="${recipe.sourceUrl}"
						target="_blank"
					>
						<span>Directions</span>
						<svg class="search__icon">
							<use href="${icons}#icon-arrow-right"></use>
						</svg>
					</a>
				</div>
				
				`;
				recipeContainer.innerHTML = "";
				recipeContainer.insertAdjacentHTML("afterbegin", markup);
		} catch (error) {
				console.log(error);
		}
};
 

*/

// =======================================
/* 280 Listening For load and hashchange Events

// import icons1 from "../img/icons.svg"; // parcel 1
import icons from "url:../img/icons.svg"; // parcel 2
console.log(icons);
import "core-js/stable";
import "regenerator-runtime/runtime";

const recipeContainer = document.querySelector(".recipe");

const timeout = function (s) {
		return new Promise(function (_, reject) {
				setTimeout(function () {
						reject(
								new Error(`Request took too long! Timeout after ${s} second`)
						);
				}, s * 1000);
		});
};

// https://forkify-api.herokuapp.com/v2

///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////
///////////////////////////////////////

const renderSpinner = function (parenEl) {
		const markup = `
				<div class="spinner">
						<svg>
						<use href="${icons}#icon-loader"></use>
						</svg>
				</div>
		`;
		parenEl.innerHTML = "";
		parenEl.insertAdjacentHTML("afterbegin", markup);
};

const showRecipe = async function () {
		try {
				const id = window.location.hash.slice(1);
				console.log(`${id}`);

				if (!id) return;

				// 1) loding rrecipe
				renderSpinner(recipeContainer);

				const response = await fetch(
						`https://forkify-api.herokuapp.com/v2/recopes/${id}`
				);
				const data = await response.json();
				if (!response.ok)
						throw new Error(`${data.message} (${response.status})`);

				// console.log(res, data);
				let { recipe } = data.data;

				recipe = {
						id: recipe.id,
						title: recipe.title,
						publisher: recipe.publisher,
						sourceUrl: recipe.source_url,
						image: recipe.image_url,
						servings: recipe.servings,
						cookingTime: recipe.cooking_time,
						ingredients: recipe.ingredients,
				};

				console.log(recipe);

				// 2) rendering recipe
				const markup = `

				<figure class="recipe__fig">
					<img src="${recipe.image}" alt="${
						recipe.title
				}" class="recipe__img" />
					<h1 class="recipe__title">
						<span>${recipe.title}</span>
					</h1>
				</figure>

				<div class="recipe__details">
					<div class="recipe__info">
						<svg class="recipe__info-icon">
							<use href="${icons}#icon-clock"></use>
						</svg>
						<span class="recipe__info-data recipe__info-data--minutes">${
								recipe.cookingTime
						}</span>
						<span class="recipe__info-text">minutes</span>
					</div>

					<div class="recipe__info">
						<svg class="recipe__info-icon">
							<use href="${icons}#icon-users"></use>
						</svg>
						<span class="recipe__info-data recipe__info-data--people">${
								recipe.servings
						}</span>
						<span class="recipe__info-text">servings</span>

						<div class="recipe__info-buttons">
							<button class="btn--tiny btn--increase-servings">
								<svg>
									<use href="${icons}#icon-minus-circle"></use>
								</svg>
							</button>
							<button class="btn--tiny btn--increase-servings">
								<svg>
									<use href="${icons}#icon-plus-circle"></use>
								</svg>
							</button>
						</div>
					</div>

					<div class="recipe__user-generated">
						<svg>
							<use href="${icons}#icon-user"></use>
						</svg>
					</div>
					<button class="btn--round">
						<svg class="">
							<use href="${icons}#icon-bookmark-fill"></use>
						</svg>
					</button>
				</div>

				<div class="recipe__ingredients">
					<h2 class="heading--2">Recipe ingredients</h2>
					<ul class="recipe__ingredient-list">

					${recipe.ingredients
							.map((ing) => {
									return `
								<li class="recipe__ingredient">
										<svg class="recipe__icon">
												<use href="${icons}#icon-check"></use>
										</svg>

										<div class="recipe__quantity">${ing.quantity}</div>

										<div class="recipe__description">
												<span class="recipe__unit">${ing.unit}</span>
										${ing.description}
										</div>
								</li>
								
								`;
							})
							.json("")}
					</ul>
				</div>

				<div class="recipe__directions">
					<h2 class="heading--2">How to cook it</h2>
					<p class="recipe__directions-text">
						This recipe was carefully designed and tested by
						<span class="recipe__publisher">${
								recipe.publisher
						}</span>. Please check out
						directions at their website.
					</p>
					<a
						class="btn--small recipe__btn"
						href="${recipe.sourceUrl}"
						target="_blank"
					>
						<span>Directions</span>
						<svg class="search__icon">
							<use href="${icons}#icon-arrow-right"></use>
						</svg>
					</a>
				</div>
				
				`;
				recipeContainer.innerHTML = "";
				recipeContainer.insertAdjacentHTML("afterbegin", markup);
		} catch (error) {
				console.log(error);
		}
};

["hashchange", "load"].forEach((event) => {
		window.addEventListener(event, showRecipe);
});

// window.addEventListener("hashchange", showRecipe);
// window.addEventListener("load", showRecipe);



*/

// =======================================
/* 281 The MVC Architecture




*/

// =======================================
/* 282 Refactoring for MVC




*/

// =======================================
/* 283 Helpers and Configuration Files




*/

// =======================================
/* 284 Event Handlers in MVC_ Publisher-Subscriber Pattern




*/

// =======================================
/* 285 Implementing Error and Sucess Messages




*/

// =======================================
/* 286 Implementing Search Results - Part 1




*/

// =======================================
/* 287 Implementing Search Results - Part 2




*/

// =======================================
/* 288 Implementing Pagination - Part 1




*/

// =======================================
/* 289 Implementing Pagination - Part 2




*/

// =======================================
/* 290 Project Planning II




*/

// =======================================
/* 291 Updating Recipe Servings




*/

// =======================================
/* 292 Developing a DOM Updating Algorithm




*/

// =======================================
/* 293 Implementing Bookmarks - Part 1




*/

// =======================================
/* 294 Implementing Bookmarks - Part 2




*/
